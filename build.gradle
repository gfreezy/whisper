group 'com.allsunday'
version '1.0-SNAPSHOT'


allprojects {
    repositories {
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
        mavenCentral()
    }
}

buildscript {
    ext.kotlinVersion = '1.1.1'
    ext.kotlinxVersion = '0.12'

    repositories {
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinxVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-nio:$kotlinxVersion"

    compile "org.slf4j:slf4j-api:1.7.23"
    compile "org.slf4j:jcl-over-slf4j:1.7.23"
    compile "org.slf4j:log4j-over-slf4j:1.7.23"
    compile "ch.qos.logback:logback-classic:1.2.1"
    compile "com.github.salomonbrys.kotson:kotson:2.5.0"
}

mainClassName = "Server"

jar {
    manifest {
        attributes('Implementation-Title': 'Gradle',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': sourceCompatibility,
                'Target-Compatibility': targetCompatibility,
                'Main-Class': mainClassName
        )
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

applicationDefaultJvmArgs = [
        "-Dkotlinx.coroutines.debug"
]

task createAllStartScripts() doLast {
}


compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
        apiVersion = "1.1"
        languageVersion = "1.1"
    }
}

kotlin { experimental { coroutines 'enable' } }


def scripts = [
        'server': 'com.allsunday.whisper.server.Server',
        'client': 'com.allsunday.whisper.client.Client'
]

scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        defaultJvmOpts = [
                "-Dkotlinx.coroutines.debug"
        ]

        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }

    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
    }
    createAllStartScripts.dependsOn(t)
}
